//preprocessor directives
#include <iostream>
#include <string>
#include <iomanip>
#include <limits>
using namespace std;

// Define maximum number of transactions
const int MAX_TRANSACTIONS = 70;// Adjust as needed

// Define maximum number of items/transaction
const int MAX_ITEMS_PER_TRANSACTION = 5; // Adjust as needed

// Define the structure to store each item in a transaction
struct TransactionItem {
    string cookieType;
    int quantitySold;
    double pricePerUnit;
};

// DECLARATION of arrays to store sales data
string transactionNo[MAX_TRANSACTIONS];
string customerName[MAX_TRANSACTIONS];
TransactionItem items[MAX_TRANSACTIONS][MAX_ITEMS_PER_TRANSACTION];
int itemsCount[MAX_TRANSACTIONS] = {0}; // Track the number of items in each transaction

// Define the structure to represent a transaction
struct Transaction {
    string transactionNo;
    string customerName;
    TransactionItem items[MAX_ITEMS_PER_TRANSACTION];
    int itemCount; // Track the number of items in the transaction
    double totalRevenue; // Total revenue for the transaction
};

// Array to store all transactions
Transaction transactions[MAX_TRANSACTIONS];


// Function to display cookie types and their corresponding numbers
void displayCookieTypes() {
    cout << setfill('-') << setw(70) << "" << endl;
    cout << setfill('*') << setw(70 / 2 + 4) << "Cookie Type" << setw(70 / 2 - 4) << "" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   1    | " << setfill('*') << setw(50 / 2 + 4) << " Coklat chip " << setw(50 / 2 - 4) << "| RM 6.50 |" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   2    | " << setfill('*') << setw(50 / 2 + 4) << " Walnut " << setw(50 / 2 - 4) << "| RM 8.50 |" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   3    | " << setfill('*') << setw(50 / 2 + 4) << " Almond " << setw(50 / 2 - 4) << "| RM 7.50 |" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   4    | " << setfill('*') << setw(50 / 2 + 4) << " Oat " << setw(50 / 2 - 4) << "| RM 7.50 |" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   5    | " << setfill('*') << setw(50 / 2 + 4) << " White chocolate " << setw(50 / 2 - 4) << "| RM 6.50 |" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   6    | " << setfill('*') << setw(50 / 2 + 4) << " Peanut butter " << setw(50 / 2 - 4) << "| RM 8.50 |" << endl;
    cout << setfill('-') << setw(70) << "" << endl;
    cout << "|   7    | " << setfill('*') << setw(50 / 2 + 4) << " Nutella " << setw(50 / 2 - 4) << "| RM 8.50 |" << endl;
   cout << setfill('-') << setw(70) << "" << endl;

    // Fill the width with '=' symbols using setw and setfill
    cout << std::setw(42) << std::setfill('=') << "=" << std::endl;
}

// Function to record sales
void recordSales() {
    // Find the first available index in the transactions array
    int i = 0;
    while (i < MAX_TRANSACTIONS && !transactions[i].transactionNo.empty()) {
        i++;
    }

    if (i == MAX_TRANSACTIONS) {
        cout << "\nMaximum number of transactions reached. Unable to record new sales.\n" << endl;
        return;
    }

    // Record transaction number
    transactions[i].transactionNo = "T" + to_string(i + 1);

    // Prompt for customer name
    cout << "\nCustomer Name: ";
    cin >> transactions[i].customerName;

    transactions[i].itemCount = 0; // Initialize item count for this transaction
    transactions[i].totalRevenue = 0.0; // Initialize total revenue for this transaction

    // Prompt for items until the user is done
    char choice;
    do {
        displayCookieTypes(); // Display available cookie types
        int cookieChoice;
        cout << "\nSelect Cookie Type (Enter number 1-7): ";
        while (!(cin >> cookieChoice) || cookieChoice < 1 || cookieChoice > 7) {
            cout << "\nInvalid choice. Please select a number between 1 and 7.\n" << endl;
            cin.clear(); // Clear error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
        }

        cout << "\nQuantity Sold for Cookie Type " << cookieChoice << ": ";
        int quantity;
        while (!(cin >> quantity) || quantity <= 0) {
            cout << "\nInvalid quantity. Please enter a positive number.\n" << endl;
            cin.clear(); // Clear error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
        }

        // Record the item for the selected cookie type and quantity
        switch (cookieChoice) {
            case 1:
                transactions[i].items[transactions[i].itemCount].cookieType = "Coklat chip";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 6.50;
                break;
            case 2:
                transactions[i].items[transactions[i].itemCount].cookieType = "Walnut";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 8.50;
                break;
            case 3:
                transactions[i].items[transactions[i].itemCount].cookieType = "Almond";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 7.50;
                break;
            case 4:
                transactions[i].items[transactions[i].itemCount].cookieType = "Oat";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 7.50;
                break;
            case 5:
                transactions[i].items[transactions[i].itemCount].cookieType = "White chocolate";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 6.50;
                break;
            case 6:
                transactions[i].items[transactions[i].itemCount].cookieType = "Peanut butter";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 8.50;
                break;
            case 7:
                transactions[i].items[transactions[i].itemCount].cookieType = "Nutella";
                transactions[i].items[transactions[i].itemCount].pricePerUnit = 8.50;
                break;
            default:
                cout << "\nInvalid choice. Item not recorded.\n" << endl;
                continue; // Skip the rest of the loop and start again
        }

        transactions[i].items[transactions[i].itemCount].quantitySold = quantity;
        transactions[i].itemCount++; // Increment item count for this transaction

        cout << "\nDo you want to add another cookie type? (y/n): ";
        cin >> choice;
    } while (choice == 'y' || choice == 'Y');

    // Calculate total revenue for this transaction
    for (int j = 0; j < transactions[i].itemCount; ++j) {
        double totalPrice = transactions[i].items[j].quantitySold * transactions[i].items[j].pricePerUnit;
        transactions[i].totalRevenue += totalPrice;
    }
}

// Function to calculate total revenue
double calculateTotalRevenue() {
	
    double totalRevenue = 0;
    for (int i = 0; i < MAX_TRANSACTIONS; ++i) {
        totalRevenue += transactions[i].totalRevenue;
    }
    return totalRevenue;
}

// Function to display all sales records
void displaySalesRecords() {
    cout << "\n === Total Sales Records ===\n" << endl;

    for (int i = 0; i < MAX_TRANSACTIONS; ++i) {
        if (!transactions[i].transactionNo.empty()) {
        	cout << "*************" << endl;
            cout << "Transaction No: " << transactions[i].transactionNo << endl;
            cout << "\nCustomer Name: " << transactions[i].customerName << endl;
            
            // Iterate over items in the transaction
            for (int j = 0; j < transactions[i].itemCount; ++j) {
                cout << "Cookie Type: " << transactions[i].items[j].cookieType << endl;
                cout << "Quantity Sold: " << transactions[i].items[j].quantitySold << endl;
                cout << "Price Per Unit: RM " << fixed << setprecision(2) << transactions[i].items[j].pricePerUnit << endl;
                
                double totalPrice = transactions[i].items[j].quantitySold * transactions[i].items[j].pricePerUnit;
                cout << "Total Price: RM " << totalPrice << endl;
                cout << "-----------------------------------" << endl;
            }

            // Print total revenue for the transaction
            cout << "Total Revenue: RM " << transactions[i].totalRevenue << endl;
            cout << "*************\n" << endl;
        }
    }
}
